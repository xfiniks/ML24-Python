import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import requests

st.set_page_config(page_title="Weather Analysis Dashboard", layout="wide")

BASE_URL = "http://api.openweathermap.org/data/2.5/weather"
SEASONS = ['winter', 'spring', 'summer', 'autumn']


@st.cache_data
def load_and_prepare_data(uploaded_file):
    df = pd.read_csv(uploaded_file, parse_dates=['timestamp'])
    df['year'] = df['timestamp'].dt.year
    df['month'] = df['timestamp'].dt.month
    df['day'] = df['timestamp'].dt.day
    return df


def prepare_city_data(df, city, window_size):
    city_data = df[df['city'] == city].copy()

    city_data['rolling_mean'] = city_data['temperature'].rolling(
        window=window_size, center=True).mean()
    city_data['rolling_std'] = city_data['temperature'].rolling(
        window=window_size, center=True).std()

    city_data['is_anomaly'] = abs(
        city_data['temperature'] - city_data['rolling_mean']
    ) > 2 * city_data['rolling_std']

    return city_data

@st.cache_data(ttl=600)
def get_current_weather(city, api_key):
    if not api_key:
        return None

    params = {
        'q': city,
        'appid': api_key,
        'units': 'metric'
    }

    try:
        response = requests.get(BASE_URL, params=params)
        data = response.json()

        if response.status_code == 401:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–ª—é—á.")
            return None
        elif response.status_code != 200:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {data.get('message', 'Unknown error')}")
            return None

        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")
        return None


def plot_temperature_heatmap(df, city):
    city_data = df[df['city'] == city].copy()
    pivot_data = city_data.pivot_table(
        index='month',
        columns='year',
        values='temperature',
        aggfunc='mean'
    ).round(1)

    fig = px.imshow(pivot_data,
                    labels=dict(x="–ì–æ–¥", y="–ú–µ—Å—è—Ü", color="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"),
                    title=f"–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –¥–ª—è {city}")
    return fig


def plot_anomalies_distribution(city_data):
    monthly_anomalies = city_data.groupby(['year', 'month'])['is_anomaly'].sum().reset_index()
    monthly_anomalies['date'] = pd.to_datetime(
        monthly_anomalies[['year', 'month']].assign(day=1)
    )

    fig = px.bar(
        monthly_anomalies,
        x='date',
        y='is_anomaly',
        title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º'
    )

    return fig


def main():
    st.title('üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')

    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        api_key = st.text_input('OpenWeatherMap API Key', type='password')

        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        show_trend = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥", value=True)
        show_anomalies = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏", value=True)
        rolling_window = st.slider("–û–∫–Ω–æ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ (–¥–Ω–∏)", 5, 60, 30)

    uploaded_file = st.file_uploader("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (CSV)", type=['csv'])

    if uploaded_file is not None:
        df = load_and_prepare_data(uploaded_file)
        cities = sorted(df['city'].unique())

        col1, col2 = st.columns([2, 1])
        with col1:
            city = st.selectbox('üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥', cities)

        if city:
            city_data = prepare_city_data(df, city, rolling_window)

            if api_key:
                weather_data = get_current_weather(city, api_key)
                if weather_data:
                    current_temp = weather_data['main']['temp']
                    current_date = pd.Timestamp.now()

                    city_data['date_diff'] = abs(city_data['timestamp'] - current_date)
                    closest_dates = city_data.nsmallest(rolling_window, 'date_diff')

                    rolling_mean = closest_dates['temperature'].mean()
                    rolling_std = closest_dates['temperature'].std()

                    is_current_anomaly = abs(current_temp - rolling_mean) > 2 * rolling_std
                    deviation_sigma = abs(current_temp - rolling_mean) / rolling_std

                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric(
                            "üå°Ô∏è –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                            f"{current_temp:.1f}¬∞C",
                            f"{current_temp - rolling_mean:+.1f}¬∞C –æ—Ç –Ω–æ—Ä–º—ã"
                        )
                    with col2:
                        st.metric("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å", f"{weather_data['main']['humidity']}%")
                    with col3:
                        st.metric("üå™Ô∏è –î–∞–≤–ª–µ–Ω–∏–µ", f"{weather_data['main']['pressure']} hPa")

                    st.subheader("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
                    temperature_status = (
                        "üö® –ê–Ω–æ–º–∞–ª—å–Ω–∞—è" if is_current_anomaly else "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è"
                    )

                    start_date = closest_dates['timestamp'].min().strftime('%d.%m')
                    end_date = closest_dates['timestamp'].max().strftime('%d.%m')

                    st.markdown(f"""
                    **–°—Ç–∞—Ç—É—Å:** {temperature_status}

                    –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å–∫–æ–ª—å–∑—è—â–µ–º –æ–∫–Ω–µ –≤ {rolling_window} –¥–Ω–µ–π:
                    - –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_date} - {end_date}
                    - –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {rolling_mean:.1f}¬∞C
                    - –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ: {deviation_sigma:.1f}œÉ
                    - –î–∏–∞–ø–∞–∑–æ–Ω –Ω–æ—Ä–º—ã: –æ—Ç {rolling_mean - 2 * rolling_std:.1f}¬∞C –¥–æ {rolling_mean + 2 * rolling_std:.1f}¬∞C
                    """)

                    if is_current_anomaly:
                        st.warning(f"""
                        ‚ö†Ô∏è –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç –Ω–æ—Ä–º—ã –Ω–∞ {deviation_sigma:.1f} 
                        —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π (—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ {rolling_window}-–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞). 
                        –≠—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º.
                        """)

                        st.info(f"""
                        üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
                        - –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {abs(current_temp - rolling_mean):.1f}¬∞C
                        - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –ø–µ—Ä–∏–æ–¥–µ: {rolling_std:.1f}¬∞C
                        """)


            tab1, tab2, tab3 = st.tabs(["üìà –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥", "üó∫Ô∏è –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞", "üìä –ê–Ω–æ–º–∞–ª–∏–∏"])

            with tab1:
                fig_timeline = px.scatter(
                    city_data,
                    x='timestamp',
                    y='temperature',
                    color='is_anomaly' if show_anomalies else None,
                    title=f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä—è–¥ –¥–ª—è {city}',
                    color_discrete_map={True: 'red', False: 'blue'}
                )

                if show_trend:
                    fig_timeline.add_trace(
                        go.Scatter(
                            x=city_data['timestamp'],
                            y=city_data['rolling_mean'],
                            mode='lines',
                            name=f'{rolling_window}-–¥–Ω–µ–≤–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ',
                            line=dict(color='green', width=2)
                        )
                    )

                    fig_timeline.add_trace(
                        go.Scatter(
                            x=city_data['timestamp'],
                            y=city_data['rolling_mean'] + 2 * city_data['rolling_std'],
                            mode='lines',
                            name='–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (2œÉ)',
                            line=dict(color='rgba(255,165,0,0.5)', width=1, dash='dash')
                        )
                    )
                    fig_timeline.add_trace(
                        go.Scatter(
                            x=city_data['timestamp'],
                            y=city_data['rolling_mean'] - 2 * city_data['rolling_std'],
                            mode='lines',
                            name='–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (2œÉ)',
                            line=dict(color='rgba(255,165,0,0.5)', width=1, dash='dash'),
                            fill='tonexty',
                            fillcolor='rgba(255,165,0,0.1)'
                        )
                    )

                fig_timeline.update_layout(
                    showlegend=True,
                    legend=dict(
                        yanchor="top",
                        y=0.99,
                        xanchor="left",
                        x=0.01,
                        bgcolor='rgba(255,255,255,0.8)'
                    ),
                    hovermode='x unified'
                )

                fig_timeline.update_xaxes(title="–î–∞—Ç–∞")
                fig_timeline.update_yaxes(title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)")

                st.plotly_chart(fig_timeline, use_container_width=True)

            with tab2:
                fig_heatmap = plot_temperature_heatmap(df, city)
                st.plotly_chart(fig_heatmap, use_container_width=True)

            with tab3:
                fig_anomalies = plot_anomalies_distribution(city_data)
                st.plotly_chart(fig_anomalies, use_container_width=True)

            st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
            col1, col2 = st.columns(2)

            with col1:
                st.subheader("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                stats = city_data['temperature'].describe().round(2)
                st.dataframe(stats)

            with col2:
                st.subheader("–°–µ–∑–æ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                seasonal_stats = city_data.groupby('season')['temperature'].agg([
                    'mean', 'std', 'min', 'max'
                ]).round(2)
                st.dataframe(seasonal_stats)

            st.header("‚ùó –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π")
            total_anomalies = city_data['is_anomaly'].sum()
            total_days = len(city_data)
            anomaly_percentage = (total_anomalies / total_days) * 100

            col1, col2 = st.columns(2)
            with col1:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π", f"{int(total_anomalies)}")
            with col2:
                st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –∞–Ω–æ–º–∞–ª–∏–π", f"{anomaly_percentage:.1f}%")


if __name__ == '__main__':
    main()